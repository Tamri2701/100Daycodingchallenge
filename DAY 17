#PROBLEM- You are given the head of a singly linked list. Your task is to determine if the linked list contains a loop. A loop exists in a linked list if the next pointer of the last node points to any other node in the list (including itself), rather than being null.

Custom Input format:
A head of a singly linked list and a pos (1-based index) which denotes the position of the node to which the last node points to. If pos = 0, it means the last node points to null, indicating there is no loop.

Examples:

Input: head: 1 -> 3 -> 4, pos = 2
Output: true
Explanation: There exists a loop as last node is connected back to the second node.


class Solution:
    #Function to check if the linked list has a loop.
    def detectLoop(self, head):
        #code here
        slow = fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
            if slow == fast:
                return True  
                
        return False


def createLinkedList(arr, pos):
     if not arr:
        return None

     nodes = [ListNode(val) for val in arr]

     for i in range(len(arr) - 1):
        nodes[i].next = nodes[i + 1]

     if pos > 0:
        nodes[-1].next = nodes[pos - 1] 

     return nodes[0]

#
solution = Solution()
