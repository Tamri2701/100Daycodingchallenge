#PROBLEM-Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Examples:

Input: root = [2, 1, 3, N, N, N, 5]

class Solution:
    def isBSTUtil(self, root, min_val, max_val):
        if root is None:
            return True
        
        if not (min_val < root.data < max_val):
            return False
        
        return (self.isBSTUtil(root.left, min_val, root.data) and
                self.isBSTUtil(root.right, root.data, max_val))
    #Function to check whether a Binary Tree is BST or not.
    def isBST(self, root):
        #code here
          return self.isBSTUtil(root, float('-inf'), float('inf'))
